
const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyGSO0xQ_Gg1MTISbEVaP9ylnDXmjzsOk7Sn8ReeZ62dsKK49sl8IJuLeD53t9pUQdo/exec';

let warningsData = [];
let filteredData = [];
let deleteMode = false;

document.addEventListener('DOMContentLoaded', function() {
    loadWarnings();
    setupSearchFilter();
});

function loadWarnings() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Carregando advert√™ncias...</p>
        </div>
    `;

    fetchWarningsData();
}

function fetchWarningsData() {
    const callbackName = `callback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    window[callbackName] = function(data) {
        try {
            if (data && data.success) {
                warningsData = data.warnings || [];
                filteredData = [...warningsData];
                displayWarnings();
            } else {
                showError('Erro ao carregar os dados: ' + (data.error || 'Erro desconhecido'));
            }
        } catch (error) {
            showError('Erro ao processar os dados: ' + error.message);
        }
        
        if (window[callbackName]) {
            delete window[callbackName];
        }
        const script = document.getElementById(`script_${callbackName}`);
        if (script) {
            script.remove();
        }
    };

    const script = document.createElement('script');
    script.id = `script_${callbackName}`;
    script.src = `${SCRIPT_URL}?action=getWarnings&callback=${callbackName}&_=${Date.now()}`;
    script.onerror = function() {
        showError('Erro ao conectar com o servidor');
    };
    
    document.head.appendChild(script);
}

function displayWarnings() {
    const contentArea = document.getElementById('content-area');
    
    if (filteredData.length === 0) {
        contentArea.innerHTML = `
            <div class="empty-state">
                <div style="font-size: 48px; margin-bottom: 20px;">üìã</div>
                <h3>Nenhuma advert√™ncia encontrada</h3>
                <p>N√£o h√° advert√™ncias registradas ou que correspondam √† sua busca.</p>
            </div>
        `;
        return;
    }

    let tableHTML = `
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        ${deleteMode ? '<th></th>' : ''}
                        <th>Data/Hora</th>
                        <th>Respons√°vel</th>
                        <th>Cargo</th>
                        <th>Advertido</th>
                        <th>Tipo</th>
                        <th>Motivo</th>
                        <th>Data Final</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
    `;

    filteredData.forEach(warning => {
        const isExpired = isDateExpired(warning.finalDate);
        const rowClass = '';
        const statusClass = isExpired ? 'status-expired' : 'status-active';
        const statusText = isExpired ? 'Expirada' : 'Ativa';
        const typeClass = warning.type === 'Advert√™ncia Verbal' ? 'type-verbal' : 'type-internal';

        const deleteCell = deleteMode ? `<td class="delete-col" title="Remover" onclick="confirmRemove(${warning.sheetRow || 'null'})">‚úñ</td>` : '';

        tableHTML += `
            <tr class="${rowClass}">
                ${deleteCell}
                <td>${formatDateTime(warning.dateTime)}</td>
                <td><strong>${escapeHtml(warning.responsible)}</strong></td>
                <td>${escapeHtml(warning.position)}</td>
                <td><strong>${escapeHtml(warning.warned)}</strong></td>
                <td><span class="type-badge ${typeClass}">${escapeHtml(warning.type)}</span></td>
                <td>${escapeHtml(warning.reason)}</td>
                <td>${formatDate(warning.finalDate)}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
            </tr>
        `;
    });

    tableHTML += `
                </tbody>
            </table>
        </div>
    `;

    contentArea.innerHTML = tableHTML;
}

function isDateExpired(dateString) {
    if (!dateString) return false;
    const today = new Date();
    const finalDate = new Date(dateString);
    today.setHours(0, 0, 0, 0);
    finalDate.setHours(0, 0, 0, 0);
    return finalDate < today;
}

function formatDateTime(dateTimeString) {
    if (!dateTimeString) return '';
    try {
        const date = new Date(dateTimeString);
        return date.toLocaleString('pt-BR');
    } catch (error) {
        return dateTimeString;
    }
}

function formatDate(dateString) {
    if (!dateString) return '';
    try {
        const ymd = typeof dateString === 'string' && dateString.match(/^(\d{4})-(\d{2})-(\d{2})$/);
        let date;
        if (ymd) {
            const year = parseInt(ymd[1], 10);
            const month = parseInt(ymd[2], 10) - 1;
            const day = parseInt(ymd[3], 10);
            date = new Date(year, month, day);
        } else {
            date = new Date(dateString);
        }
        if (isNaN(date.getTime())) return dateString;
        return date.toLocaleDateString('pt-BR');
    } catch (error) {
        return dateString;
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function setupSearchFilter() {
    const searchInput = document.getElementById('searchInput');
    if (!searchInput) return;
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        if (searchTerm === '') {
            filteredData = [...warningsData];
        } else {
            filteredData = warningsData.filter(warning => 
                warning.warned.toLowerCase().includes(searchTerm)
            );
        }
        
        displayWarnings();
    });
}

function openModal() {
    const modal = document.getElementById('warningModal');
    if (!modal) return;
    modal.style.display = 'block';
    
    const today = new Date();
    const futureDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));
    const input = document.getElementById('finalDate');
    if (input) input.value = futureDate.toISOString().split('T')[0];
}

function closeModal() {
    const modal = document.getElementById('warningModal');
    if (!modal) return;
    modal.style.display = 'none';
    const form = document.getElementById('warningForm');
    if (form) form.reset();
}

function submitWarning() {
    const form = document.getElementById('warningForm');
    
    if (!form) return;
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }

    const formData = {
        responsible: document.getElementById('responsible').value.trim(),
        position: document.getElementById('position').value.trim(),
        warned: document.getElementById('warned').value.trim(),
        type: document.getElementById('type').value,
        reason: document.getElementById('reason').value.trim(),
        finalDate: document.getElementById('finalDate').value
    };

    const submitBtn = document.querySelector('#warningModal .modal-footer .btn-success');
    const originalText = submitBtn ? submitBtn.innerHTML : 'Salvando...';
    if (submitBtn) {
        submitBtn.innerHTML = '‚è≥ Salvando...';
        submitBtn.disabled = true;
    }

    submitToGoogleScript(formData)
        .then(response => {
            if (response.success) {
                showAlert('Sucesso', 'Advert√™ncia registrada com sucesso!', {type: 'success'}).then(() => {
                    closeModal();
                    refreshData();
                });
            } else {
                showAlert('Erro', 'Erro ao registrar advert√™ncia: ' + response.error, {type: 'error'});
            }
        })
        .catch(error => {
            showAlert('Erro', 'Erro ao enviar dados: ' + (error.message || error), {type: 'error'});
        })
        .finally(() => {
            if (submitBtn) {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });
}

function showAlert(title, message, options = {}) {
    return new Promise(resolve => {
        const alertEl = document.getElementById('customAlert');
        const alertTitle = document.getElementById('customAlertTitle');
        const alertMessage = document.getElementById('customAlertMessage');
        const okBtn = document.getElementById('customAlertOk');

        if (alertTitle) alertTitle.textContent = title || 'Aviso';
        if (alertMessage) alertMessage.textContent = message || '';

        const iconEl = alertEl ? alertEl.querySelector('.alert-icon') : null;
        if (iconEl) {
            if (options.type === 'success') {
                iconEl.textContent = '‚úÖ';
            } else if (options.type === 'error') {
                iconEl.textContent = '‚ùå';
            } else {
                iconEl.textContent = 'üîî';
            }
        }

        const overlay = document.getElementById('customAlertOverlay');
        if (overlay) overlay.classList.add('show');
        document.body.style.overflow = 'hidden';
        if (alertEl) alertEl.classList.add('show');
        try { if (okBtn) okBtn.focus(); } catch(e) {}

        function cleanup() {
            if (alertEl) alertEl.classList.remove('show');
            if (overlay) overlay.classList.remove('show');
            document.body.style.overflow = '';
            if (okBtn) okBtn.removeEventListener('click', onOk);
            document.removeEventListener('keydown', onKeyDown);
            resolve();
        }

        function onOk() {
            cleanup();
        }

        function onKeyDown(e) {
            if (e.key === 'Escape' || e.key === 'Enter') {
                cleanup();
            }
        }

        if (okBtn) okBtn.addEventListener('click', onOk);
        document.addEventListener('keydown', onKeyDown);
    });
}

function submitToGoogleScript(data) {
    return new Promise((resolve, reject) => {
        const callbackName = `submitCallback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        window[callbackName] = function(response) {
            resolve(response);
            
            if (window[callbackName]) {
                delete window[callbackName];
            }
            const script = document.getElementById(`script_${callbackName}`);
            if (script) {
                script.remove();
            }
        };

        const script = document.createElement('script');
        script.id = `script_${callbackName}`;
        
        const params = new URLSearchParams({
            action: 'addWarning',
            callback: callbackName,
            responsible: data.responsible,
            position: data.position,
            warned: data.warned,
            type: data.type,
            reason: data.reason,
            finalDate: data.finalDate,
            _: Date.now()
        });
        
        script.src = `${SCRIPT_URL}?${params.toString()}`;
        script.onerror = function() {
            reject(new Error('Erro ao conectar com o servidor'));
        };
        
        document.head.appendChild(script);
    });
}

function startRemoveFlow() {
    showPrompt('C√≥digo de Remo√ß√£o', 'Insira o c√≥digo para habilitar remo√ß√£o').then(code => {
        if (!code) return;
        verifyCode(code).then(result => {
            if (result && result.valid) {
                deleteMode = true;
                showAlert('Remo√ß√£o habilitada', 'Clique no X ao lado esquerdo da advert√™ncia para marcar para remo√ß√£o.', {type: 'success'}).then(() => displayWarnings());
            } else {
                showAlert('C√≥digo inv√°lido', 'O c√≥digo informado √© inv√°lido.', {type: 'error'});
            }
        }).catch(err => {
            showAlert('Erro', 'Falha ao verificar c√≥digo: ' + (err.message || err), {type: 'error'});
        });
    }).catch(()=>{});
}

function verifyCode(code) {
    return new Promise((resolve, reject) => {
        const callbackName = `verify_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;
        window[callbackName] = function(data) {
            resolve(data);
            if (window[callbackName]) delete window[callbackName];
            const s = document.getElementById(`script_${callbackName}`); if (s) s.remove();
        };
        const script = document.createElement('script');
        script.id = `script_${callbackName}`;
        script.src = `${SCRIPT_URL}?action=verifyCode&callback=${callbackName}&code=${encodeURIComponent(code)}&_=${Date.now()}`;
        script.onerror = function(){ reject(new Error('Erro ao conectar')); };
        document.head.appendChild(script);
    });
}

function showPrompt(title, message) {
    return new Promise(resolve => {
        const overlay = document.getElementById('customPromptOverlay');
        const dialog = document.getElementById('customPrompt');
        const input = document.getElementById('customPromptInput');
        const ok = document.getElementById('customPromptOk');
        const cancel = document.getElementById('customPromptCancel');

        if (document.getElementById('customPromptTitle')) document.getElementById('customPromptTitle').textContent = title || '';
        if (document.getElementById('customPromptMessage')) document.getElementById('customPromptMessage').textContent = message || '';

        if (overlay) overlay.classList.add('show');
        if (dialog) dialog.style.display = 'flex';
        if (dialog) dialog.classList.add('show');
        document.body.style.overflow = 'hidden';
        if (input) input.value = '';
        try{ if (input) input.focus(); } catch(e){}

        function cleanup() {
            if (overlay) overlay.classList.remove('show');
            if (dialog) dialog.classList.remove('show');
            if (dialog) dialog.style.display = 'none';
            document.body.style.overflow = '';
            if (ok) ok.removeEventListener('click', onOk);
            if (cancel) cancel.removeEventListener('click', onCancel);
            document.removeEventListener('keydown', onKey);
        }

        function onOk(){ const val = input ? input.value : null; cleanup(); resolve(val); }
        function onCancel(){ cleanup(); resolve(null); }
        function onKey(e){ if (e.key === 'Escape') { onCancel(); } if (e.key === 'Enter') { onOk(); } }

        if (ok) ok.addEventListener('click', onOk);
        if (cancel) cancel.addEventListener('click', onCancel);
        document.addEventListener('keydown', onKey);
    });
}

function showConfirm(message) {
    return new Promise(resolve => {
        const overlay = document.getElementById('customConfirmOverlay');
        const dialog = document.getElementById('customConfirm');
        const yes = document.getElementById('customConfirmYes');
        const no = document.getElementById('customConfirmNo');

        if (document.getElementById('customConfirmMessage')) document.getElementById('customConfirmMessage').textContent = message || 'Confirma?';

        if (overlay) overlay.classList.add('show');
        if (dialog) dialog.style.display = 'flex';
        if (dialog) dialog.classList.add('show');
        document.body.style.overflow = 'hidden';

        function cleanup() {
            if (overlay) overlay.classList.remove('show');
            if (dialog) dialog.classList.remove('show');
            if (dialog) dialog.style.display = 'none';
            document.body.style.overflow = '';
            if (yes) yes.removeEventListener('click', onYes);
            if (no) no.removeEventListener('click', onNo);
            document.removeEventListener('keydown', onKey);
        }

        function onYes(){ cleanup(); resolve(true); }
        function onNo(){ cleanup(); resolve(false); }
        function onKey(e){ if (e.key === 'Escape') { onNo(); } if (e.key === 'Enter') { onYes(); } }

        if (yes) yes.addEventListener('click', onYes);
        if (no) no.addEventListener('click', onNo);
        document.addEventListener('keydown', onKey);
    });
}

async function confirmRemove(sheetRow) {
    if (!sheetRow || isNaN(sheetRow)) {
        showAlert('Erro', 'Linha inv√°lida para remo√ß√£o', {type: 'error'});
        return;
    }

    const ok = await showConfirm('Deseja remover essa advert√™ncia?');
    if (!ok) return;

    const callbackName = `remove_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;
    window[callbackName] = function(res){
        if (res && res.success) {
            showAlert('Removido', 'Advert√™ncia removida com sucesso', {type: 'success'}).then(()=> refreshData());
        } else {
            showAlert('Erro', 'N√£o foi poss√≠vel remover: ' + (res && res.error ? res.error : 'erro desconhecido'), {type: 'error'});
        }
        if (window[callbackName]) delete window[callbackName];
        const s = document.getElementById(`script_${callbackName}`); if (s) s.remove();
    };
    const script = document.createElement('script');
    script.id = `script_${callbackName}`;
    script.src = `${SCRIPT_URL}?action=removeWarning&callback=${callbackName}&sheetRow=${sheetRow}&_=${Date.now()}`;
    script.onerror = function(){ showAlert('Erro', 'Falha na conex√£o', {type:'error'}); };
    document.head.appendChild(script);
}

function refreshData() {
    loadWarnings();
}

function showError(message) {
    const contentArea = document.getElementById('content-area');
    if (!contentArea) return;
    contentArea.innerHTML = `
        <div class="empty-state">
            <div style="font-size: 48px; margin-bottom: 20px; color: #e53e3e;">‚ùå</div>
            <h3>Erro ao carregar dados</h3>
            <p>${message}</p>
            <button class="btn btn-primary" onclick="refreshData()" style="margin-top: 20px;">
                üîÑ Tentar Novamente
            </button>
        </div>
    `;
}

window.onclick = function(event) {
    const modal = document.getElementById('warningModal');
    if (event.target === modal) {
        closeModal();
    }
}

window.openModal = openModal;
window.closeModal = closeModal;
window.startRemoveFlow = startRemoveFlow;
window.refreshData = refreshData;
window.submitWarning = submitWarning;
window.confirmRemove = confirmRemove;
window.loadWarnings = loadWarnings;

